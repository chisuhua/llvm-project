//===-- PPULegalizerInfo.h ------------------------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/// \file
/// This file declares the targeting of the Machinelegalizer class for PPU.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_PPU_PPUMACHINELEGALIZER_H
#define LLVM_LIB_TARGET_PPU_PPUMACHINELEGALIZER_H

#include "llvm/CodeGen/GlobalISel/LegalizerInfo.h"
#include "OPUInstrInfo.h"

namespace llvm {

class OPUTargetMachine;
class LLVMContext;
class OPUSubtarget;

/// This class provides the information for the target register banks.
class OPULegalizerInfo : public LegalizerInfo {
  const OPUSubtarget &ST;
public:
  PPULegalizerInfo(const OPUSubtarget &ST,
                    const OPUTargetMachine &TM);

  bool legalizeCustom(MachineInstr &MI, MachineRegisterInfo &MRI,
                      MachineIRBuilder &B, GISelChangeObserver &Observer) const override;

  bool buildAbsGlobalAddress(Register DstReg, LLT PtrTy, MachineIRBuilder &B,
                      const GlobalValue *GV, unsigned Offset, bool EnableSimt,
                      unsigned GAFlags = OPUInstrInfo::MO_NONE) const;

  bool buildPCRelGlobalAddress(Register DstReg, LLT PtrTy, MachineIRBuilder &B,
                      const GlobalValue *GV, unsigned Offset,
                      unsigned GAFlags = OPUInstrInfo::MO_NONE) const;

  bool legalizeGlobalValue(MachineInstr &MI, MachineRegisterInfo &MRI,
                            MachineIRBuilder &B) const;
};
} // end namespace llvm
#endif
